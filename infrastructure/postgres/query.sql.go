// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, name, birth, email, location, created_at, updated_at, active
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, name, birth, email, location, created_at, updated_at, active
`

type CreateUserParams struct {
	ID        string
	Name      string
	Birth     pgtype.Date
	Email     pgtype.Text
	Location  pgtype.Text
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Active    bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Birth,
		arg.Email,
		arg.Location,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Birth,
		&i.Email,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
RETURNING id, name, birth, email, location, created_at, updated_at, active
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, birth, email, location, created_at, updated_at, active FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Birth,
		&i.Email,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, birth, email, location, created_at, updated_at, active FROM users
WHERE id IN ($1)
`

func (q *Queries) GetUsers(ctx context.Context, id string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Birth,
			&i.Email,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, name, birth, email, location, created_at, updated_at, active FROM users
WHERE active
ORDER BY name
`

func (q *Queries) ListActiveUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Birth,
			&i.Email,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, birth, email, location, created_at, updated_at, active FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Birth,
			&i.Email,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  name = CASE WHEN $3::boolean
  THEN $4::text ELSE name END,

  birth = CASE WHEN $5::boolean
  THEN $6::date ELSE birth END,

  email = CASE WHEN $7::boolean
  THEN $8::text ELSE email END,

  location = CASE WHEN $9::boolean
  THEN $10::text ELSE location END,

  active = CASE WHEN $11::boolean
  THEN $12::boolean ELSE active END,

  updated_at = $2
WHERE id = $1
RETURNING id, name, birth, email, location, created_at, updated_at, active
`

type UpdateUserParams struct {
	ID               string
	UpdatedAt        pgtype.Timestamp
	NameDoUpdate     bool
	Name             string
	BirthDoUpdate    bool
	Birth            pgtype.Date
	EmailDoUpdate    bool
	Email            string
	LocationDoUpdate bool
	Location         string
	ActiveDoUpdate   bool
	Active           bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.NameDoUpdate,
		arg.Name,
		arg.BirthDoUpdate,
		arg.Birth,
		arg.EmailDoUpdate,
		arg.Email,
		arg.LocationDoUpdate,
		arg.Location,
		arg.ActiveDoUpdate,
		arg.Active,
	)
	return err
}
